trait Logger {
    def log(msg: String)
}

class ConsoleLogger extends Logger{
    def log(msg: String) = ....
}

TUTAJ TRAIT PEŁNI ROLE INTERFEJSU
--------------------------------------------------------------

triat ConsoleLogger extends Logger{
    def log(msg: String) = ....
}

class Person extends ConsoleLogger{ 
    log("JAKIS TEKS")
}
TAKI TRAIT MA IMPLEMENTACJE SWOJĄ :)
CO WAZNE PERSON DZIEDZICZY PO ANYVAL BO ConsoleLogger to INTERFEJSU
-----------------------------------------------------------------

WSZYSTKO CO Z TRAITA ZOSTAJE KOPIOWANE PRZY KOMPILACJI JAKO METODA PERSON
------------------------------------------------------------------

trait TimestampLogger extends Logger{
    def log()
        super.log(timestamp+msg)
}

trait ShortLogger extends Logger{
    def log()
        super.log(msg[0:20]) //tak pythonowo napisalem sobie
}

class Person extends ConsoleLogger with TimestampLogger{ 
    log("JAKIS TEKS")
}

TERAZ DZIALA TO TAK, ZE NAJPIERD log() z TimestampLogger która wywołując super() przneosi się do ConsoleLoggera
------------------------------------------------------------------------------

class Person extends ConsoleLogger with TimestampLogger with ShortLogger{ 
    log("JAKIS TEKS")
}

            Logger

ConsoleLogger  TimestampLogger   ShortLogger

            Person



LECI OD KOŃCA! OSTATNI WITH JEST PIERWSZY

Logger
ConsoleLogger
TimestampLogger
ShortLogger
Person

Powyżej zdefiniowana hierarchia

------------------------------------------------------------

Person p = new Person(...) extends <jakis trait>
Teraz tylko ten obiekt rozszerza TRAITA

----------------------------------------------------------

nadpisywanie metody abstrakcyjnej tak jak w loggerach wyżej jest okej
inne nadpisywanie potrzebne override

------------------------------------------------------------
Traity nie mogą mieć elementow konstruktora

------------------------------------------------------------
package bla.bla.bla
class M

Teraz klasa M widzi wszystko z pakietu bla ale nie widzi podrzędnych bla
------------------------------------------------------------

import java.util.Math._ 
teraz importujemy wszystko z Math

import java.util.List=>javaList
Alias dla List gdy mamy np dwa importy z tą samą nazwą
-----------------------------------------------------------
package object p1 {
    def converToHex(...) = {}
}

class A{
    import p1._
    converToHex(...)
}

Import dla klasy też zadziała
-----------------------------------------------------------
Enumeracja od następnych zajęć

----------------------------------------------------------
